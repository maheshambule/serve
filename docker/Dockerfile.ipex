# syntax = docker/dockerfile:experimental
#
# Following comments have been shamelessly copied from https://github.com/pytorch/pytorch/blob/master/Dockerfile
# 
# NOTE: To build this you will need a docker version > 18.06 with
#       experimental enabled and DOCKER_BUILDKIT=1
#
#       If you do not use buildkit you are not going to have a good time
#
#       For reference: 
#           https://docs.docker.com/develop/develop-images/build_enhancements/

ARG BASE_IMAGE=ubuntu:20.04
ARG BUILD_TYPE=dev
ARG PYTHON_VERSION=3.8
FROM ${BASE_IMAGE} AS compile-image

ARG BASE_IMAGE
ARG BRANCH_NAME=ipex_docker_1
ARG JAVA_TOOL_OPTIONS=""
ENV JAVA_TOOL_OPTIONS ${JAVA_TOOL_OPTIONS}

ENV PYTHONUNBUFFERED TRUE

RUN --mount=type=cache,id=apt-dev,target=/var/cache/apt \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
    fakeroot \
    ca-certificates \
    dpkg-dev \
    g++ \
    git \
    openjdk-11-jdk \
    curl \
    vim \
    build-essential \
    libjemalloc-dev \
    cmake \
    libjpeg-dev \
    libpng-dev \
    && rm -rf /var/lib/apt/lists/*

RUN curl -o ~/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \
     chmod +x ~/miniconda.sh && \
     ~/miniconda.sh -b -p /opt/conda && \
     rm ~/miniconda.sh && \
     /opt/conda/bin/conda install -y python=$PYTHON_VERSION numpy pyyaml scipy ipython mkl mkl-include ninja cython typing pybind11 && \
     /opt/conda/bin/conda clean -ya
ENV PATH /opt/conda/bin:$PATH

# Build Dev Image
FROM compile-image AS dev-image
RUN pip install lark-parser hypothesis transformers
RUN git clone https://github.com/maheshambule/serve.git \
    && cd serve && git checkout ${BRANCH_NAME} \
    && ./scripts/install_from_src \
    && useradd -m model-server \
    && mkdir -p /home/model-server/tmp \
    && cp docker/dockerd-entrypoint.sh /usr/local/bin/dockerd-entrypoint.sh \
    && chmod +x /usr/local/bin/dockerd-entrypoint.sh \
    && chown -R model-server /home/model-server \
    && cp docker/config.properties /home/model-server/config.properties \
    && mkdir /home/model-server/model-store && chown -R model-server /home/model-server/model-store

ARG TORCHVISION_VERSION=0.6
RUN pip uninstall -y torch torchvision
RUN pip install torchvision==${TORCHVISION_VERSION}+cpu --no-deps -f https://download.pytorch.org/whl/torch_stable.html
RUN git clone https://github.com/intel/intel-extension-for-pytorch \
    && cd intel-extension-for-pytorch && git submodule sync && git submodule update --init --recursive \
    && git clone https://github.com/pytorch/pytorch \
    && cd pytorch && git checkout v1.5.0-rc3 && git submodule sync && git submodule update --init --recursive \
    && git apply ../torch_patches/dpcpp-v1.5-rc3.patch \
    && USE_MKLDNN=1 USE_CUDA=0 USE_CUDNN=0 CMAKE_PREFIX_PATH="$(dirname $(which conda))/../" python setup.py install \
    && cd .. && python setup.py install && rm -rf *

ARG OMP_NUM_THREADS=1
ENV OMP_NUM_THREADS ${OMP_NUM_THREADS}
ARG KMP_BLOCKTIME=1
ENV KMP_BLOCKTIME ${KMP_BLOCKTIME} 
ARG IPEX_AUTO_MP=""
ENV IPEX_AUTO_MP ${IPEX_AUTO_MP}
ENV MALLOC_CONF "oversize_threshold:1,background_thread:true,metadata_thp:auto,dirty_decay_ms:-1,muzzy_decay_ms:-1"
ENV LD_PRELOAD "/opt/conda/lib/libiomp5.so /usr/lib/x86_64-linux-gnu/libjemalloc.so"

EXPOSE 8080 8081
USER model-server
WORKDIR /home/model-server
ENV TEMP=/home/model-server/tmp
ENTRYPOINT ["/usr/local/bin/dockerd-entrypoint.sh"]
CMD ["serve"]
